/* automatically generated by rust-bindgen 0.70.1 */

pub type gf_val_32_t = u32;
pub type gf_val_64_t = u64;
pub type gf_val_128_t = *mut u64;
pub type GFP = *mut gf;
#[repr(C)]
#[derive(Copy, Clone)]
pub union gf_func_a_b {
    pub w32: ::std::option::Option<
        unsafe extern "C" fn(gf: GFP, a: gf_val_32_t, b: gf_val_32_t) -> gf_val_32_t,
    >,
    pub w64: ::std::option::Option<
        unsafe extern "C" fn(gf: GFP, a: gf_val_64_t, b: gf_val_64_t) -> gf_val_64_t,
    >,
    pub w128: ::std::option::Option<
        unsafe extern "C" fn(gf: GFP, a: gf_val_128_t, b: gf_val_128_t, c: gf_val_128_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gf_func_a_b"][::std::mem::size_of::<gf_func_a_b>() - 8usize];
    ["Alignment of gf_func_a_b"][::std::mem::align_of::<gf_func_a_b>() - 8usize];
    ["Offset of field: gf_func_a_b::w32"][::std::mem::offset_of!(gf_func_a_b, w32) - 0usize];
    ["Offset of field: gf_func_a_b::w64"][::std::mem::offset_of!(gf_func_a_b, w64) - 0usize];
    ["Offset of field: gf_func_a_b::w128"][::std::mem::offset_of!(gf_func_a_b, w128) - 0usize];
};
impl ::std::fmt::Debug for gf_func_a_b {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "gf_func_a_b {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gf_func_a {
    pub w32: ::std::option::Option<unsafe extern "C" fn(gf: GFP, a: gf_val_32_t) -> gf_val_32_t>,
    pub w64: ::std::option::Option<unsafe extern "C" fn(gf: GFP, a: gf_val_64_t) -> gf_val_64_t>,
    pub w128:
        ::std::option::Option<unsafe extern "C" fn(gf: GFP, a: gf_val_128_t, b: gf_val_128_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gf_func_a"][::std::mem::size_of::<gf_func_a>() - 8usize];
    ["Alignment of gf_func_a"][::std::mem::align_of::<gf_func_a>() - 8usize];
    ["Offset of field: gf_func_a::w32"][::std::mem::offset_of!(gf_func_a, w32) - 0usize];
    ["Offset of field: gf_func_a::w64"][::std::mem::offset_of!(gf_func_a, w64) - 0usize];
    ["Offset of field: gf_func_a::w128"][::std::mem::offset_of!(gf_func_a, w128) - 0usize];
};
impl ::std::fmt::Debug for gf_func_a {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "gf_func_a {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gf_region {
    pub w32: ::std::option::Option<
        unsafe extern "C" fn(
            gf: GFP,
            src: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            val: gf_val_32_t,
            bytes: ::std::os::raw::c_int,
            add: ::std::os::raw::c_int,
        ),
    >,
    pub w64: ::std::option::Option<
        unsafe extern "C" fn(
            gf: GFP,
            src: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            val: gf_val_64_t,
            bytes: ::std::os::raw::c_int,
            add: ::std::os::raw::c_int,
        ),
    >,
    pub w128: ::std::option::Option<
        unsafe extern "C" fn(
            gf: GFP,
            src: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            val: gf_val_128_t,
            bytes: ::std::os::raw::c_int,
            add: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gf_region"][::std::mem::size_of::<gf_region>() - 8usize];
    ["Alignment of gf_region"][::std::mem::align_of::<gf_region>() - 8usize];
    ["Offset of field: gf_region::w32"][::std::mem::offset_of!(gf_region, w32) - 0usize];
    ["Offset of field: gf_region::w64"][::std::mem::offset_of!(gf_region, w64) - 0usize];
    ["Offset of field: gf_region::w128"][::std::mem::offset_of!(gf_region, w128) - 0usize];
};
impl ::std::fmt::Debug for gf_region {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "gf_region {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gf_extract {
    pub w32: ::std::option::Option<
        unsafe extern "C" fn(
            gf: GFP,
            start: *mut ::std::os::raw::c_void,
            bytes: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
        ) -> gf_val_32_t,
    >,
    pub w64: ::std::option::Option<
        unsafe extern "C" fn(
            gf: GFP,
            start: *mut ::std::os::raw::c_void,
            bytes: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
        ) -> gf_val_64_t,
    >,
    pub w128: ::std::option::Option<
        unsafe extern "C" fn(
            gf: GFP,
            start: *mut ::std::os::raw::c_void,
            bytes: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            rv: gf_val_128_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gf_extract"][::std::mem::size_of::<gf_extract>() - 8usize];
    ["Alignment of gf_extract"][::std::mem::align_of::<gf_extract>() - 8usize];
    ["Offset of field: gf_extract::w32"][::std::mem::offset_of!(gf_extract, w32) - 0usize];
    ["Offset of field: gf_extract::w64"][::std::mem::offset_of!(gf_extract, w64) - 0usize];
    ["Offset of field: gf_extract::w128"][::std::mem::offset_of!(gf_extract, w128) - 0usize];
};
impl ::std::fmt::Debug for gf_extract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "gf_extract {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gf {
    pub multiply: gf_func_a_b,
    pub divide: gf_func_a_b,
    pub inverse: gf_func_a,
    pub multiply_region: gf_region,
    pub extract_word: gf_extract,
    pub scratch: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gf"][::std::mem::size_of::<gf>() - 48usize];
    ["Alignment of gf"][::std::mem::align_of::<gf>() - 8usize];
    ["Offset of field: gf::multiply"][::std::mem::offset_of!(gf, multiply) - 0usize];
    ["Offset of field: gf::divide"][::std::mem::offset_of!(gf, divide) - 8usize];
    ["Offset of field: gf::inverse"][::std::mem::offset_of!(gf, inverse) - 16usize];
    ["Offset of field: gf::multiply_region"][::std::mem::offset_of!(gf, multiply_region) - 24usize];
    ["Offset of field: gf::extract_word"][::std::mem::offset_of!(gf, extract_word) - 32usize];
    ["Offset of field: gf::scratch"][::std::mem::offset_of!(gf, scratch) - 40usize];
};
impl ::std::fmt::Debug for gf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "gf {{ multiply: {:?}, divide: {:?}, inverse: {:?}, multiply_region: {:?}, extract_word: {:?}, scratch: {:?} }}" , self . multiply , self . divide , self . inverse , self . multiply_region , self . extract_word , self . scratch)
    }
}
pub type gf_t = gf;
extern "C" {
    pub fn galois_init_default_field(w: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn galois_uninit_field(w: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn galois_change_technique(gf: *mut gf_t, w: ::std::os::raw::c_int);
}
extern "C" {
    pub fn galois_single_multiply(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn galois_single_divide(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn galois_inverse(
        x: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn galois_region_xor(
        src: *mut ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        nbytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn galois_w08_region_multiply(
        region: *mut ::std::os::raw::c_char,
        multby: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_int,
        r2: *mut ::std::os::raw::c_char,
        add: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn galois_w16_region_multiply(
        region: *mut ::std::os::raw::c_char,
        multby: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_int,
        r2: *mut ::std::os::raw::c_char,
        add: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn galois_w32_region_multiply(
        region: *mut ::std::os::raw::c_char,
        multby: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_int,
        r2: *mut ::std::os::raw::c_char,
        add: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn galois_init_field(
        w: ::std::os::raw::c_int,
        mult_type: ::std::os::raw::c_int,
        region_type: ::std::os::raw::c_int,
        divide_type: ::std::os::raw::c_int,
        prim_poly: u64,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut gf_t;
}
extern "C" {
    pub fn galois_init_composite_field(
        w: ::std::os::raw::c_int,
        region_type: ::std::os::raw::c_int,
        divide_type: ::std::os::raw::c_int,
        degree: ::std::os::raw::c_int,
        base_gf: *mut gf_t,
    ) -> *mut gf_t;
}
extern "C" {
    pub fn galois_get_field_ptr(w: ::std::os::raw::c_int) -> *mut gf_t;
}
extern "C" {
    pub fn jerasure_matrix_to_bitmatrix(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        matrix: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_dumb_bitmatrix_to_schedule(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_smart_bitmatrix_to_schedule(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_generate_schedule_cache(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix: *mut ::std::os::raw::c_int,
        smart: ::std::os::raw::c_int,
    ) -> *mut *mut *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_free_schedule(schedule: *mut *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn jerasure_free_schedule_cache(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        cache: *mut *mut *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_do_parity(
        k: ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        parity_ptr: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_matrix_encode(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        matrix: *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_bitmatrix_encode(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix: *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_schedule_encode(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        schedule: *mut *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_matrix_decode(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        matrix: *mut ::std::os::raw::c_int,
        row_k_ones: ::std::os::raw::c_int,
        erasures: *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_bitmatrix_decode(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix: *mut ::std::os::raw::c_int,
        row_k_ones: ::std::os::raw::c_int,
        erasures: *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_schedule_decode_lazy(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix: *mut ::std::os::raw::c_int,
        erasures: *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
        smart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_schedule_decode_cache(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        scache: *mut *mut *mut ::std::os::raw::c_int,
        erasures: *mut ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_make_decoding_matrix(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        matrix: *mut ::std::os::raw::c_int,
        erased: *mut ::std::os::raw::c_int,
        decoding_matrix: *mut ::std::os::raw::c_int,
        dm_ids: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_make_decoding_bitmatrix(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        matrix: *mut ::std::os::raw::c_int,
        erased: *mut ::std::os::raw::c_int,
        decoding_matrix: *mut ::std::os::raw::c_int,
        dm_ids: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_erasures_to_erased(
        k: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        erasures: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_matrix_dotprod(
        k: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        matrix_row: *mut ::std::os::raw::c_int,
        src_ids: *mut ::std::os::raw::c_int,
        dest_id: ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_bitmatrix_dotprod(
        k: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        bitmatrix_row: *mut ::std::os::raw::c_int,
        src_ids: *mut ::std::os::raw::c_int,
        dest_id: ::std::os::raw::c_int,
        data_ptrs: *mut *mut ::std::os::raw::c_char,
        coding_ptrs: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_do_scheduled_operations(
        ptrs: *mut *mut ::std::os::raw::c_char,
        schedule: *mut *mut ::std::os::raw::c_int,
        packetsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_invert_matrix(
        mat: *mut ::std::os::raw::c_int,
        inv: *mut ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_invert_bitmatrix(
        mat: *mut ::std::os::raw::c_int,
        inv: *mut ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_invertible_matrix(
        mat: *mut ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_invertible_bitmatrix(
        mat: *mut ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_print_matrix(
        matrix: *mut ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_print_bitmatrix(
        matrix: *mut ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn jerasure_matrix_multiply(
        m1: *mut ::std::os::raw::c_int,
        m2: *mut ::std::os::raw::c_int,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        r2: ::std::os::raw::c_int,
        c2: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn jerasure_get_stats(fill_in: *mut f64);
}
extern "C" {
    pub fn jerasure_autoconf_test() -> ::std::os::raw::c_int;
}
